plugins {
    id 'io.spring.dependency-management' version '1.0.9.RELEASE' apply false
    id 'io.spring.nohttp' version '0.0.5.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21' apply false
    id 'org.jetbrains.dokka' version '0.10.1' apply false
    id 'org.asciidoctor.jvm.convert' version '3.1.0'
    id 'org.asciidoctor.jvm.pdf' version '3.1.0'
    id 'de.undercouch.download' version '4.1.1'
    id "io.freefair.aspectj" version '5.1.1' apply false
    id "com.github.ben-manes.versions" version '0.28.0'
    id "com.github.johnrengelman.shadow" version "6.1.0" apply false
    id "me.champeau.jmh" version "0.6.4" apply false
    id "org.jetbrains.kotlin.plugin.serialization" version "1.5.21" apply false
    id 'java'
}

group = 'kr.co.rokroot.demo'
version = '0.0.1-ALPHA'
sourceCompatibility = '1.8'

ext {
    moduleProjects = subprojects.findAll { it.name.startsWith("spring-") }
    javaProjects = subprojects - project(":framework-bom")
    withoutJclOverSlf4j = {
        exclude group: "org.slf4j", name: "jcl-over-slf4j"
    }
}

configure(allprojects) { project ->
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {

        }
        dependencies {
            dependencySet(group: 'org.apache.logging.log4j', version: '2.14.1') {
                entry 'log4j-api'
                entry 'log4j-core'
                entry 'log4j-jul'
                entry 'log4j-slf4j-impl'
            }
        }
        generatedPomCustomization {
            enabled = false
        }
        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"
        }
        repositories {
            mavenCentral()
            maven { url "https://repo.spring.io/libs-spring-framework-build" }
        }
    }
    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"
            cacheDynamicVersionsFor 0, "seconds"
        }
    }
}


configure([rootProject] + javaProjects) { project ->
    group = "org.springframework"

    apply plugin: "java"
    apply plugin: "java-test-fixtures"
    apply plugin: "checkstyle"
    apply plugin: 'org.springframework.build.compile'
    apply from: "${rootDir}/gradle/toolchains.gradle"
    apply from: "${rootDir}/gradle/ide.gradle"

    pluginManager.withPlugin("kotlin") {
        apply plugin: "org.jetbrains.dokka"
        compileKotlin {
            kotlinOptions {
                languageVersion = "1.3"
                apiVersion = "1.3"
                freeCompilerArgs = ["-Xjsr305=strict", "-Xsuppress-version-warnings", "-Xopt-in=kotlin.RequiresOptIn"]
                allWarningsAsErrors = true
            }
        }
        compileTestKotlin {
            kotlinOptions {
                freeCompilerArgs = ["-Xjsr305=strict"]
            }
        }
    }

    test {
        useJUnitPlatform()
        include(["**/*Tests.class", "**/*Test.class"])
        systemProperty("java.awt.headless", "true")
        systemProperty("testGroups", project.properties.get("testGroups"))
        systemProperty("io.netty.leakDetection.level", "paranoid")
    }

    checkstyle {
        toolVersion = "8.44"
        configDirectory.set(rootProject.file("src/checkstyle"))
    }

    dependencies {
        testCompile("org.junit.jupiter:junit-jupiter-api")
        testCompile("org.junit.jupiter:junit-jupiter-params")
        testCompile("org.mockito:mockito-core")
        testCompile("org.mockito:mockito-junit-jupiter")
        testCompile("io.mockk:mockk")
        testCompile("org.assertj:assertj-core")
        // Pull in the latest JUnit 5 Launcher API to ensure proper support in IDEs.
        testRuntime("org.junit.platform:junit-platform-launcher")
        testRuntime("org.junit.jupiter:junit-jupiter-engine")
        testRuntime("org.apache.logging.log4j:log4j-core")
        testRuntime("org.apache.logging.log4j:log4j-slf4j-impl")
        testRuntime("org.apache.logging.log4j:log4j-jul")
        // JSR-305 only used for non-required meta-annotations
        compileOnly("com.google.code.findbugs:jsr305")
        testCompileOnly("com.google.code.findbugs:jsr305")
        checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.15")
    }

    ext.javadocLinks = [
            "https://docs.oracle.com/javase/8/docs/api/",
            "https://docs.oracle.com/javaee/7/api/",
            "https://docs.oracle.com/cd/E13222_01/wls/docs90/javadocs/",  // CommonJ
            "https://www.ibm.com/support/knowledgecenter/SS7JFU_8.5.5/com.ibm.websphere.javadoc.doc/web/apidocs/",
            "https://glassfish.java.net/nonav/docs/v3/api/",
            "https://docs.jboss.org/jbossas/javadoc/4.0.5/connector/",
            "https://docs.jboss.org/jbossas/javadoc/7.1.2.Final/",
            "https://tiles.apache.org/tiles-request/apidocs/",
            "https://tiles.apache.org/framework/apidocs/",
            "https://www.eclipse.org/aspectj/doc/released/aspectj5rt-api/",
            "https://www.ehcache.org/apidocs/2.10.4/",
            "https://www.quartz-scheduler.org/api/2.3.0/",
            "https://fasterxml.github.io/jackson-core/javadoc/2.10/",
            "https://fasterxml.github.io/jackson-databind/javadoc/2.10/",
            "https://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.10/",
            "https://hc.apache.org/httpcomponents-client-5.1.x/current/httpclient5/apidocs/",
            "https://projectreactor.io/docs/test/release/api/",
            "https://junit.org/junit4/javadoc/4.13.2/",
            "https://junit.org/junit5/docs/5.7.2/api/"
    ] as String[]
}

configure(moduleProjects) { project ->
    apply from: "${rootDir}/gradle/spring-module.gradle"
}

configure(rootProject) {
    description = "Spring Framework"

    apply plugin: "groovy"
    apply plugin: "kotlin"
    apply plugin: "io.spring.nohttp"
    apply plugin: 'org.springframework.build.api-diff'
    apply from: "${rootDir}/gradle/publications.gradle"
    apply from: "${rootDir}/gradle/docs.gradle"

    nohttp {
        source.exclude "**/test-output/**"
        allowlistFile = project.file("src/nohttp/allowlist.lines")
        def rootPath = file(rootDir).toPath()
        def projectDirs = allprojects.collect { it.projectDir } + "${rootDir}/buildSrc"
        projectDirs.forEach { dir ->
            ['bin', 'build', 'out', '.settings']
                    .collect { rootPath.relativize(new File(dir, it).toPath()) }
                    .forEach { source.exclude "$it/**" }
            ['.classpath', '.project']
                    .collect { rootPath.relativize(new File(dir, it).toPath()) }
                    .forEach { source.exclude "$it" }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact docsZip
                artifact schemaZip
                artifact distZip
            }
        }
    }
}